/* Reset default settings  */
*,
*::before,
*::after {
    /* changing how PADDING is calculated to make it within a width instead of adding to the total width of something */
    box-sizing: border-box;  
}

/* Setting up some custom properties, update these for your own design */

:root {
    /* font family copied from Google fonts :) */
    /* --ff-primary: "Source Sans Pro", sans-serif; */
    /* --ff-secondary: "Source Sans Pro", monospace; */
    /* Updating font families after updating font links in HTML (comment out old font families above) */
    --ff-primary: "Lora", serif;
    --ff-secondary: "Roboto Slab", serif;

    /* font weights */
    /* --fw-reg: 300; */
    /* --fw-bold: 900; */
    /* Updating font weights after updating font links in HTML (comment out old font families above) */
    --fw-reg: 400;
    --fw-bold: 700;

    /* colors */
    --clr-light: #fff;
    --clr-dark: #303030;
    /* Or you could invert your color scheme from light-dark to dark-light */
    /* --clr-light: #333; */
    /* --clr-dark: #fff; */
    /* --clr-accent: #16e0bd; */
    /* Updating a color accent if you don't like that green color */
    --clr-accent: #f8333c;

    /* font sizes - always in REMs - calculated based on MOCK-UP */
    --fs-h1: 3rem;
    --fs-h2: 2.25rem;
    --fs-h3: 1.25rem;
    --fs-body: 1rem;

    /* box shadow */
    /* up/down left/right blur rgba*/
    --bs: .25em .25em .75em rgba(0,0,0,0.25),
          /* another layer to help to increase the realism of the shadows */
          .125em .125em .25em rgba(0,0,0,0.15);
}

/*  generic media query - works well for this design - making fonts bigger for bigger screens */
@media (min-width: 800px) {
    :root {
        /* redefine font sizes - making bigger at large screen sizes - so we don't have to redefine in our actual CSS */
        --fs-h1: 4.5rem;
        --fs-h2: 3.75rem;
        --fs-h3: 1.5rem;
        --fs-body: 1.125rem;
        /* switching colors on desktop */
        --clr-light: #333;
        --clr-dark: #fff;
        --clr-accent: #16e0bd;
    }
}


/* General styles */

/* easy way to add a scrolling effect without JS */
html {
    scroll-behavior: smooth;
}

body {
    background: var(--clr-light);
    color: var(--clr-dark);
    margin: 0;
    font-family: var(--ff-primary);
    font-size: var(--fs-body);
    line-height: 1.6;
}

section {
    /* keep things from touching the side of the screen */
    padding: 5em 2em;
}

/* setting up images just so they don't grow bigger and overflow at the side of their parents */
img {
    display: block;
    max-width: 100%;
} 

/* Making strong tag even stronger/bolder (it doesn't work by some reason) */
strong { font-weight: var(--fw-bold) }

/* Everything when it has a FOCUS state (hitting a TAB) is going to get an outline on it */
/* will be applied to our button but it's also gonna apply to other things like links 
so you can see on which element is the FOCUS state (the TAB is on) */
:focus {
    outline: 3px solid var(--clr-accent);
    outline-offset: 3px;
}


/* Buttons */
/* Usually for buttons usually have designs that have more than one button
but in this case we have only one button to style up */

.btn {
    display: inline-block;
    padding: .5em 2.5em;
    background: var(--clr-accent);
    color: var(--clr-dark);
    text-decoration: none;
    /* puts a pointer on the button */
    cursor: pointer;
    font-size: .8rem;
    /* gives uppercase to the text in Button */
    text-transform: uppercase;
    /* helps to spread a letters inside a Button */
    letter-spacing: 2px;
    font-weight: var(--fw-bold);
    /* gets a button bigger when you hover over with .btn:hover property bellow */
    transition: transform .2s ease-in-out;
}

/* gets a button bigger when you hover over with transition property in btn above */
.btn:hover {
    transform: scale(1.1);
}


/* Basic Typography */

h1,
h2,
h3 {
    line-height: 1;
    margin: 0;
}

h1 { font-size: var(--fs-h1); }
h2 { font-size: var(--fs-h2); }
h3 { font-size: var(--fs-h3); }


/* Titles and Subtitles */
/* Do MARGINS and PADDINGS on the text using EMs measurements - relative to font-size */

.section__title {
    margin-bottom: .25em;
}

.section__title--intro {
    font-weight: var(--fw-reg);
}

/* make text in strong to have its own line */
.section__title--intro strong {
    display: block;
}

.section__subtitle {
    margin: 0;
    font-size: var(--fs-h3);
}

.section__subtitle--intro,
.section__subtitle--about {
    background: var(--clr-accent);
    padding: .25em 1em;
    font-family: var(--ff-secondary);
    margin-bottom: 1em;
}

.section__subtitle--work {
    color: var(--clr-accent);
    font-weight: var(--fw-bold);
    margin-bottom: 1em;
}

/* Header */
/* hide navigation bar for Mobile */

header {
    /* display: flex; will not work with Chrome and NORMALIZE package (linked in index.html head section) */
    display: flex;
    justify-content: space-between;
    padding: 1em;
}

.logo {
    max-width: 100px;
}

/* setting up the nav bar */
.nav {
    /* to move button (of hamburger menu) to its right place */
    position: fixed;
    background: var(--clr-dark);
    color: var(--clr-light);
    /* putting hamburger menu all across the screen */
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    /* to put it afront of everything else */
    z-index: 100;
    /* move it to the left half way (50% of itself)*/
    /* transform: translateX(50%); */
    /* but we leave it to 0% so we can style it now and later put 100% to hide it and then with JS we could manipulate with it - to make it to slide in and slide out */
    transform: translateX(100%);
    transition: transform 250ms cubic-bezier(.5, 0, .5, 1);
}

/* setting up the nav list */
.nav__list {
    /* taking out bullets from the list */
    list-style: none;
    display: flex;
    /* so it actually has a height that we want it to */
    height: 100%;
    /* will space the evenly in vertical space */
    flex-direction: column;
    justify-content: space-evenly;
    /* will center items horizontally */
    align-items: center;
    /* fix weird issues with alignment */
    margin: 0;
    padding: 0;
}

/* gives a nav text a styling */
.nav__link {
    color: inherit;
    font-weight: var(--fw-bold);
    font-size: var(--fs-h2);
    text-decoration: none;
}

.nav__link:hover {
    color: var(--clr-accent);
}


/* HAMBURGER MENU */
/* there are other ways to do it: hard way (opens up extra posibilities in terms what we could do with it - add animations and have fun with it
because all the different peaces will be animatable and individual istead of being a single icon) and easy way */

/* button itself */
.nav-toggle {
    padding: .5em;
    /* to make it to disappear */
    background: transparent;
    border: 0;
    cursor: pointer;
    /* putting it in top right corner */
    position: absolute;
    right: 1em;
    top: 1em;
    /* put it above everything - if the nav is open, i want to make sure my button actually stays afront of that */
    z-index: 101;
}

/* testing our function ...
navToggle.addEventListener('click', () => {
    document.body.classList.toggle('nav-open');
});
by adding .nav-open {background: red;} that what means the line 'document.body.classList.toggle('nav-open'); and if we click on that button the color of body will be red'
*/
/* .nav-open {background: red;} */


/* ADDING JAVA SCRIPT */
/* connected to index.js */
.nav-open .nav {
    /* when nav is open then nav itself (.nav) going to get ... */
    transform: translateX(0);
    /* what that means is when we click that it slides out, when we click again it slides back in */
}

.nav-open .nav-toggle {
    /* when nav is open then nav-toggle itself (.nav-toggle) going to get ... */
    position: fixed;
    /* the reason for that (position: fixed;) is having it switched is because we don't want it always to be position: fixed;
    cause we don't want it to scroll with the site */
}

/* ROTATE toggle stripes inside so it turns into an X 
with .nav-open .hamburger::before {...} and .nav-open .hamburger::after {...} and .nav-open .hamburger {...} */
.nav-open .hamburger {
    /* when nav is open then hamburger itself (.hamburger) going to get ... */
    transform: rotate(.625turn);
    /* and it will rotate it around, you can do it in degrees but I want to show that you can do it in turn units */
}

.nav-open .hamburger::before {
    /* when nav is open then (.hamburger::before) going to get ... */
    /* rotated by 90 degree and adjusted/moved back (translateX) by 6px as it was off and ugly by 6px */
    transform: rotate(90deg) translateX(-6px);
}

.nav-open .hamburger::after {
    /* when nav is open then (.hamburger::after) going to get ... */
    opacity: 0;
    /* so it's going to disappear and rest would rotate and turn into an X */
}



/* give 3 stripes inside a button */
.hamburger {
    /* give it a display: block because by difault span is inline */
    display: block;
    /* give it a position: relative because we're gonna be using a pseudo elements with absolute positioning - it will make our lives much easier */
    position: relative;
}

/* give 3 stripes inside a button */
.hamburger,
.hamburger::before,
.hamburger::after {
    background: var(--clr-accent);
    width: 2em;
    height: 3px;
    border-radius: 1em;
    /* give some animation */
    transition: transform 250ms ease-in-out;
}

/* give 3 stripes inside a button */
.hamburger::before,
.hamburger::after {
    /* first think you want to do is give it a content as pseudo elements will not work unless you give them some content */
    content: '';
    /* you give them position or give them display property is required */
    position: absolute;
    /* that it means that it matches the width with the other one
    and it's because i have position: relative in .hamburger. if not then it will be relative to whole screen 
    and huge bar going all the way across */
    left: 0;
    right: 0;
}

/* give 3 stripes inside a button */
/* the reason it is 6px is because we have height of 3 px, empty space of 3px and then we'll have the rest of hamburger */
.hamburger::before { top: 6px; }
.hamburger::after { bottom: 6px; }


/* Intro section */

.intro {
    position: relative;
}

/* giving a box shadow to intro img */
.intro__img {
    box-shadow: var(--bs);
}

/* making the bar to be a size of itself above the picture */
.section__subtitle--intro {
    display: inline-block;
}

/* Good practice for media queries is 300px and up, 600px and up, 900px and up - nice and generic */
@media (min-width: 600px) {
    .intro {
        display: grid;
        width: min-content;
        margin: 0 auto;
        grid-column-gap: 1em;
        grid-template-areas: 
            "img title"
            "img subtitle";
        /* grid-template-columns: for img    for text; */
        grid-template-columns: min-content max-content;
    }
    .intro__img {
        grid-area: img;
        min-width: 250px;
        /* putting green bar behind the img */
        position: relative;
        z-index: 2;
    }
    .section__subtitle--intro {
        /* Stops the green top bar to stretch out up and down */
        align-self: start;
        /* will stretch the green top bar to the right and left - all the way across */
        grid-column: -1 / 1;
        /* will get the green bar to the right of the picture */
        grid-row: 2;
        text-align: right;
        /* will get the green bar across and behind the picture and a bit to the left */
        position: relative;
        left: -1.5em;
        /* will get the green bar's width to match and stretch all the way to the right */
        width: calc(100% + 1.5em);
    }
}


/* My Services section */

.my-services {
    /* good to have a background color and then background image afterwards because
    if the image ever fails for some reason you have a background color instead 
    and still be able to read the white text */
    background-color: var(--clr-dark);
    background-image: url(../img/services-bg.jpg);
    /* to make sure bg image doesn't repeats itself */
    background-size: cover;
    /* make background a bit darker */
    /* background-blend-mode: multiply; */
    color: var(--clr-light);
    text-align: center;
}

.section__title--services {
    color: var(--clr-accent);
    /* position: relative; is because we have pseudo element we want to put on it 
    to create a white line under "What I Do" title */
    position: relative;
}

/* to create a white line under 'What I do' we use pseudo element - .section__title--services::after {} */
.section__title--services::after {
    /* you need to give a 'content' to pseudo element or they will not appear */
    content: '';
    display: block;
    width: 2.5em;
    height: 1px;
    margin: 0.5em auto 1em;
    /* gives the line the same color as 'What I do' text */
    /* background-color: currentColor; */
    /* or give a white color with opacity */
    background-color: var(--clr-light);
    opacity: 0.25;
}

/* the whall service section gets bottom margin BUT the margins disappearin for larger screens because we did margin: 0 auto;
in media query but we fix that by going to media query for service section bellow and change it from margin: 0 auto; to 
margin-left: auto; and margin-right: auto; just so it doesn't overwrite that margin-bottom: 4em; along the way */
.services {
    margin-bottom: 4em;
}

/* will stop things (in this case text) to move(stretch) too much - keeping a decent shape when it is too wide */
.service {
    max-width: 500px;
    /* keep it centered  */
    margin: 0 auto;
}

/* if we want to brake into multiple columns for bigger screens we use media queries
AND 800px seem to work better as a breakpoint for when this would switch over than 900px */
@media (min-width: 800px) {
    .services {
        display: flex;
        /* will stop things to move(stretch) too much - keeping a decent shape when it is too wide */
        max-width: 1000px;
        margin-left: auto;
        margin-right: auto;
    }
    /* will give a space between service blocks (Design + Development, E-Commerce, WorldPress) */
    /* sibling + sibling of the first block (Design + Development) which is ignored by margin-left */
    .service + .service {
        margin-left: 2em;
    }
}


/* About me section */

/* Setting up the size of the section */
.about-me {
    max-width: 1000px;
    margin: 0 auto;
}

.about-me__img {
    box-shadow: var(--bs)
}

/* in this case we use 600px to break the text part and img into 2 columns for wider screen */
@media (min-width: 600px) {
    .about-me {
        display: grid;
        /* columns for main area (1fr) and img (200px) */
        grid-template-columns: 1fr 200px;
        grid-template-areas: 
            "title img"
            "subtitle img"
            "text img";
        /* gap between text column and img */
        grid-column-gap: 2em;
    }

    .section__title--about {
        /* connected with grid-template-areas: in .about-me grid setup */
        grid-area: title;
    }

    .section__subtitle--about {
        grid-column: 1 / -1;
        /* make img go over the subtitle green stripe */
        grid-row: 2;
        position: relative;
        left: -1em;
        /* to make green stripe to stick out on both sides a little bit */
        width: calc(100% + 2em);
        /* giving a text in green stripe a padding of 2em */
        padding-left: 1em;
        /* to make sure that text doesn't go under knees the image
        and gives img a padding of 2em each side and it makes 4em together (from text padding point of view) */
        padding-right: calc(200px + 4em);
    }

    .about-me__img {
        /* connected with grid-template-areas: in .about-me grid setup */
        grid-area: img;
        /* to put img on the top of the green stripe */
        position: relative;
        z-index: 2;
    }
}


/* Portfolio section */

.my-work {
    background-color: var(--clr-dark);
    color: var(--clr-light);
    text-align: center;
}

.portfolio {
    display: grid;
    /* it is automatically make 3 columns */
    /* grid-template-columns: repeat(3, 1fr); */
    /* but if you want the grid aoutomatically change the columns depnding on screen size
     but want to keep the certain size then use 'grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));'*/
    /* each grid has minimum size of 300px but if it has room to get bigger in size, it will (1fr)
    if the screen gets smaller it will automatically go down to 2 columns, 
    at even smaller size it will automatically drop down to 2 */
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    /* ther is a chance you want to set a max-width with this, depends on you,
    just to prevent it from being this one long string that goes all the way across,
    it is achoice, if you set a max-width also just keep the margin of 0 auto to keep it cetered on the screen */
}

.portfolio__item {
    background: var(--clr-accent);
    /* when hover on top of the img the green color is gonna show through
    and it's gonna grow and shrink and overflow will be hidden when transition the images with hover (bellow) */
    overflow: hidden;
}

/* transition the images with hover */
.portfolio__img {
    transition: 
        /* when hover on top of the img the green color is gonna show through
        and it's gonna grow and shrink */
        transform 750ms cubic-bezier(.5, 0, .5, 1),
        opacity 250ms linear;
}

/* to make green outline/green bar work properly */
.portfolio__item:focus {
    position: relative;
    z-index: 2;
}

.portfolio__img:hover,
.portfolio__item:focus .portfolio__img {
    /* when hover on top of the img or comes into a focus (TAB) the green color is gonna show through
    and it's gonna grow and shrink */
    transform: scale(1.2);
    opacity: .75;
}


/* Footer */

.footer {
    background: #111;
    color: var(--clr-accent);
    text-align: center;
    padding: 2.5em 0;
    /* boosting font-size and icon-size bigger the same time */
    font-size: var(--fs-h3);
}

/* for links usually use 'inherit' so all the links in footer */
.footer a {
    color: inherit;
    text-decoration: none;
}

.footer__link {
    font-weight: var(--fw-bold);
}

/* icons and linlk in footer change an opacity in hover state */
.footer__link:hover,
.social-list__link:hover {
    opacity: .7;
}

/* underlines an email in hover state */
.footer__link:hover {
    text-decoration: underline;
}


.social-list {
    /* removing bullets from our list */
    list-style: none;
    display: flex;
    justify-content: center;
    margin: 2em 0 0;
    /* removing default padding from icons as it was between bullets and icons */
    padding: 0;
}

/* making some space between icons */
.social-list__item {
    margin: 0 .5em;
}

/* giving icons more hovering space */
.social-list__link {
    padding: .5em;
}


/* Individual portfolio item styles */

.portfolio-item-individual {
    padding: 0 2em 2em;
    max-width: 1000px;
    margin: 0 auto;
}

/* to make picture looking wider */
.portfolio-item-individual p {
    max-width: 600px;
    /* because we wnat to keep top and bottom default margins that already are on the paragraphs */
    margin-left: auto;
    margin-right: auto;
}
